/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
 * or http://www.opensolaris.org/os/licensing.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at usr/src/OPENSOLARIS.LICENSE.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */ /*
 * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
 * Use is subject to license terms.
 */

package org.opensolaris.webstack.settings.options;

import java.awt.Desktop;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;

import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.PlainDocument;
import org.opensolaris.webstack.settings.model.Environment;
import org.opensolaris.webstack.settings.model.HttpdConfModel;

/**
 *
 * @author  ludo
 */
public class Apache2Panel extends javax.swing.JPanel implements PropertyChangeListener, OptionTab {

    private HttpdConfModel model;

    /** Creates new form Apache2Panel */
    public Apache2Panel(final HttpdConfModel model) {
        initComponents();
        this.model = model;
        model.addPropertyChangeListener(this);
        textFieldPortNumber.setText("" + model.getPortNumber());



    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelPortNumber = new javax.swing.JLabel();
        textFieldPortNumber = new IntTextField();
        labelDocRoot = new javax.swing.JLabel();
        textFieldDocRoot = new javax.swing.JTextField();
        labelWebSite = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        buttonAdvanceConf = new javax.swing.JButton();
        buttonRepair = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        labelWebPage = new HyperLinkButton("aaa","fff");
        browseButton = new javax.swing.JButton();

        labelPortNumber.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelPortNumber.setLabelFor(textFieldPortNumber);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/opensolaris/webstack/settings/options/Bundle"); // NOI18N
        labelPortNumber.setText(bundle.getString("LABEL_PORT")); // NOI18N

        textFieldPortNumber.setText("80");

        labelDocRoot.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelDocRoot.setLabelFor(textFieldDocRoot);
        labelDocRoot.setText(bundle.getString("LABEL_DOCDIR")); // NOI18N

        textFieldDocRoot.setText("/usr/apache2/htdocs");

        labelWebSite.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelWebSite.setText(bundle.getString("LABEL_HOMEPAGE")); // NOI18N

        jCheckBox1.setText(bundle.getString("LABEL_HOMEDIRS")); // NOI18N

        jLabel1.setText(bundle.getString("LABEL_HELP")); // NOI18N
        jLabel1.setEnabled(false);

        buttonAdvanceConf.setText(bundle.getString("LABEL_ADVANCE_CONF")); // NOI18N
        buttonAdvanceConf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAdvanceConfActionPerformed(evt);
            }
        });

        buttonRepair.setText(bundle.getString("LABEL_REPAIR")); // NOI18N

        jLabel2.setText(bundle.getString("LABEL_EDITHTTPD")); // NOI18N
        jLabel2.setEnabled(false);

        labelWebPage.setText("jButton1");

        browseButton.setText(bundle.getString("LBL_BrowseButton")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(labelDocRoot, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelPortNumber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE))
                    .addComponent(labelWebSite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonAdvanceConf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
                    .addComponent(buttonRepair)
                    .addComponent(labelWebPage, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(textFieldDocRoot, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(textFieldPortNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {labelDocRoot, labelPortNumber, labelWebSite});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPortNumber)
                    .addComponent(textFieldPortNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDocRoot)
                    .addComponent(browseButton)
                    .addComponent(textFieldDocRoot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelWebSite)
                    .addComponent(labelWebPage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAdvanceConf)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonRepair)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void buttonAdvanceConfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAdvanceConfActionPerformed

        Desktop desktop = null;
        // Before more Desktop API is used, first check
        // whether the API is supported by this particular
        // virtual machine (VM) on this particular host.
        if (Desktop.isDesktopSupported()) {
            desktop = Desktop.getDesktop();
        }
        if (desktop.isSupported(Desktop.Action.OPEN)) {
            try {

                desktop.open(new File(Environment.getHttpdconf()));
            } catch (IOException ex) {
                Logger.getLogger(Apache2Panel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonAdvanceConfActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        String newLoc = browseHTDOCLocation();
        if (newLoc != null && newLoc.length() > 0) {
            textFieldDocRoot.setText(newLoc);
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JButton buttonAdvanceConf;
    private javax.swing.JButton buttonRepair;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel labelDocRoot;
    private javax.swing.JLabel labelPortNumber;
    private javax.swing.JButton labelWebPage;
    private javax.swing.JLabel labelWebSite;
    private javax.swing.JTextField textFieldDocRoot;
    private javax.swing.JTextField textFieldPortNumber;
    // End of variables declaration//GEN-END:variables
    public void propertyChange(PropertyChangeEvent arg0) {
        System.out.println("model changed!~~~" + model.getPortNumber());
        textFieldPortNumber.setText("" + model.getPortNumber());
        labelWebPage.setText("http://localhost:" + textFieldPortNumber.getText());
    }

    public void OKCalled() {
        model.setPortNumber(textFieldPortNumber.getText());
        if (model.isDirty()) {
            model.save();
        }
    }

    private String browseHTDOCLocation() {
        String location = null;
        JFileChooser chooser = getJFileChooser();
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/opensolaris/webstack/settings/options/Bundle"); // NOI18N
        int returnValue = chooser.showDialog(this, bundle.getString("LBL_ChooseButton")); //NOI18N

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            location = chooser.getSelectedFile().getAbsolutePath();
        }
        return location;
    }

    private JFileChooser getJFileChooser() {
        JFileChooser chooser = new JFileChooser();
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/opensolaris/webstack/settings/options/Bundle"); // NOI18N
        chooser.setDialogTitle(bundle.getString("LBL_ChooserName")); //NOI18N
        chooser.setDialogType(JFileChooser.CUSTOM_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setApproveButtonMnemonic("Choose_Button_Mnemonic".charAt(0)); //NOI18N
        chooser.setMultiSelectionEnabled(false);
        chooser.addChoosableFileFilter(new DirFilter());
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setApproveButtonToolTipText(bundle.getString("LBL_ChooserName")); //NOI18N
        chooser.getAccessibleContext().setAccessibleName(bundle.getString("LBL_ChooserName")); //NOI18N
        chooser.getAccessibleContext().setAccessibleDescription(bundle.getString("LBL_ChooserName")); //NOI18N

        // set the current directory
        File currentLocation = new File(textFieldDocRoot.getText());
        if (currentLocation.exists() && currentLocation.isDirectory()) {
            chooser.setCurrentDirectory(currentLocation.getParentFile());
            chooser.setSelectedFile(currentLocation);
        }

        return chooser;
    }

    private static class DirFilter extends javax.swing.filechooser.FileFilter {

        public boolean accept(File f) {
            if (!f.exists() || !f.canRead() || !f.isDirectory()) {
                return false;
            } else {
                return true;
            }
        }

        public String getDescription() {
            java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/opensolaris/webstack/settings/options/Bundle"); // NOI18N
            return bundle.getString("LBL_DirType");
        }
    }

    private class IntTextField extends javax.swing.JTextField {

        @Override
        protected Document createDefaultModel() {
            final Document d = new IntNumberDocument();

            d.addDocumentListener(new DocumentListener() {

                public void insertUpdate(DocumentEvent arg0) {
                    try {
                        labelWebPage.setText("http://localhost:" + d.getText(0, d.getLength()));
                    } catch (BadLocationException ex) {
                        Logger.getLogger(Apache2Panel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                public void removeUpdate(DocumentEvent arg0) {
                    insertUpdate(arg0);
                }

                public void changedUpdate(DocumentEvent arg0) {
                    insertUpdate(arg0);
                }
            });
            return d;
        }
    }

    private class IntNumberDocument extends PlainDocument {

        @Override
        public void insertString(int offs, String str, AttributeSet a)
                throws BadLocationException {

            char[] source = str.toCharArray();
            char[] result = new char[source.length];
            int j = 0;

            for (int i = 0; i < result.length; i++) {
                if (Character.isDigit(source[i])) {
                    result[j++] = source[i];
                } else {
                    Apache2Panel.this.getToolkit().beep();
                }
            }

            super.insertString(offs, new String(result, 0, j), a);


        }
    }
}