<?xml version="1.0" encoding="UTF-8"?>
<project name="download-style">
<!--
  Copyright (c) 2003-2008 by nexB, Inc. http://www.nexb.com/ - All rights reserved.
  This software is licensed under the terms of the Open Software License version 2.1.
  A copy of the license is available at http://opensource.org/licenses/osl-2.1.php
-->
	<target name="test-dummy-target" />
	<macrodef name="download-style"
	          description="Try to determine the download style based on available information. The property is always created. And overwritten if something was set before.">
		<attribute name="component.id" />
		<attribute name="component.version" />
		<attribute name="component.url" />
		<attribute name="component.extract.folder" />
		<attribute name="property" />
		<sequential>
			<var unset="true" name="@{property}" />
			<var name="extract.destination"
			     value="@{component.extract.folder}/@{component.id}-@{component.version}" />

			<get-filename path="@{component.url}" var="component.filename" />
			<get-file-extension filename="${component.filename}"
			                    var="file.extension" />

			<var unset="true" name="file.isZip" />
			<condition property="file.isZip">
				<equals arg1="${file.extension}"
				        arg2="zip"
				        casesensitive="false" />
			</condition>

            <var unset="true" name="file.isBzip2" />
            <condition property="file.isBizp2">
                <equals arg1="${file.extension}"
                        arg2="bz2"
                        casesensitive="false" />
            </condition>

			<var unset="true" name="file.isJar" />
			<condition property="file.isJar">
				<equals arg1="${file.extension}"
				        arg2="jar"
				        casesensitive="false" />
			</condition>

			<var unset="true" name="file.isTgz" />
			<condition property="file.isTgz">
				<equals arg1="${file.extension}"
				        arg2="tgz"
				        casesensitive="false" />
			</condition>

			<var unset="true" name="file.isTarGz" />
			<condition property="file.isTarGz">
				<or>
					<equals arg1="${file.extension}"
					        arg2="tar.gz"
					        casesensitive="false" />
					<isset property="file.isTgz" />
				</or>
			</condition>

			<var unset="true" name="file.isZipOrTarGz" />
			<condition property="file.isZipOrTarGz">
				<or>
					<isset property="file.isZip" />
					<isset property="file.isTarGz" />
				</or>
			</condition>

			<!--
			THOSE CHECKS REQUIRE THAT :
			* THE DOWNLOAD HAS ALREADY BEEN DONE
			* THE EXTRACTION HAS ALREADY TAKEN PLACE
			-->

			<!-- Java Stuffs-->
			<!-- bin dir at the root-->
			<var unset="true" name="has.bin.dir" />
			<available property="has.bin.dir"
			           file="bin"
			           filepath="${extract.destination}"
			           type="dir" />
			<!-- lib dir at the root-->
			<var unset="true" name="has.lib.dir" />
			<available property="has.lib.dir"
			           file="lib"
			           filepath="${extract.destination}"
			           type="dir" />
			<!-- java in bin-->
			<var unset="true" name="has.bin.java" />
			<available property="has.bin.java"
			           file="bin/java"
			           filepath="${extract.destination}"
			           type="file" />
			<!-- java.exe in bin-->
			<var unset="true" name="has.bin.java.exe" />
			<available property="has.bin.java.exe"
			           file="bin/java.exe"
			           filepath="${extract.destination}"
			           type="file" />

			<var unset="true" name="has.java.executable" />
			<condition property="has.java.executable">
				<or>
					<isset property="has.bin.java" />
					<isset property="has.bin.java.exe" />
				</or>
			</condition>

			<!-- site.xml -->
			<var unset="true" name="has.site.xml" />
			<available property="has.site.xml"
			           file="site.xml"
			           filepath="${extract.destination}"
			           type="file">
			</available>

			<!-- plugin.xml : may indicate a singledd jarred plugin-->
			<fileset dir="${extract.destination}" id="fs.plugin.xml">
				<include name="plugin.xml" />
			</fileset>
			<available-fileset refid="fs.plugin.xml" var="has.plugin.xml" />

			<!-- META-INF/MANIFEST.MF : may indicate a singledd jarred plugin -->
			<fileset dir="${extract.destination}" id="fs.manifest.mf">
				<include name="META-INF/MANIFEST.MF" />
			</fileset>
			<available-fileset refid="fs.manifest.mf" var="has.manifest.mf" />

			<!-- <pluginid>_version/plugin.xml: may indicate a singled zipped plugin -->
			<fileset dir="${extract.destination}" id="component.id.plugin.xml">
				<include name="*/plugin.xml" />
			</fileset>
			<available-fileset refid="component.id.plugin.xml"
			                   var="has.componentid.plugin.xml" />


			<!-- <pluginid>_version/META-INF/MANIFEST.MF: may indicate a singled zipped plugin -->
			<fileset dir="${extract.destination}" id="component.id.manifest.mf">
				<include name="*/META-INF/MANIFEST.MF" />
			</fileset>
			<available-fileset refid="component.id.manifest.mf"
			                   var="has.componentid.manifest.mf" />


			<!-- jars at the root-->
			<fileset dir="${extract.destination}" id="root.jars">
				<include name="*.jar" />
			</fileset>
			<available-fileset refid="root.jars" var="has.root.jars" />


			<!-- find some dir at the root with a bunch of plugins stuff
			directly under, be they jars or dirs-->
			<path id="dirs.at.root">
				<dirset dir="${extract.destination}">
					<include name="*" />
                    <exclude name="bin" />
                    <exclude name="jre" />
                    <exclude name="lib" />
                    <exclude name="include" />
					<exclude name="man" />
					<exclude name="eclipse" />
					<exclude name="features" />
					<exclude name="plugins" />
					<exclude name="configuration" />
					<exclude name="config" />
					<exclude name="docs" />
					<exclude name="imq" />
					<exclude name="javadb" />
					<exclude name="samples" />
					<exclude name="updatecenter" />
					<exclude name="jbi" />

				</dirset>
			</path>
			<available-fileset refid="dirs.at.root" var="dirs.at.root" />
			<if>
				<isset property="dirs.at.root" />
				<then>
					<does-dir-contains-eclipse-stuff dir="${dirs.at.root}"
					                                 var="has.dirs.jars.or.plugins" />
				</then>
			</if>

            <!-- find some dir in a root subfolder with a bunch of plugins stuff
            directly under, be they jars or dirs-->
            <path id="subdirs.at.root">
                <dirset dir="${extract.destination}">
                    <include name="*/plugins" />
                </dirset>
            </path>
            <available-fileset refid="subdirs.at.root" var="subdirs.at.root" />
            <if>
                <isset property="subdirs.at.root" />
                <then>
                    <does-dir-contains-eclipse-stuff dir="${subdirs.at.root}"
                                                     var="has.root.somedirs.plugins" />
                </then>
            </if>




			<!-- plugins dir at the root-->
			<var unset="true" name="has.plugins.dir" />
			<available property="has.plugins.dir"
			           file="plugins"
			           filepath="${extract.destination}"
			           type="dir" />

			<!-- features dir at the root-->
			<var unset="true" name="has.features.dir" />
			<available property="has.features.dir"
			           file="features"
			           filepath="${extract.destination}"
			           type="dir" />

            <!-- plugins dir under a subdir -->
            <var unset="true" name="has.somedir.plugins.dir" />
            <available property="has.somedir.plugins.dir"
                       file="plugins"
		       type="dir">
	      <filepath>
		<fileset dir="${extract.destination}">
		  <include name="*/*"/>
		</fileset>
	      </filepath>
	    </available>

            <!-- features dir under a subdir -->
            <var unset="true" name="has.somedir.features.dir" />
            <available property="has.somedir.features.dir"
                       file="features"
                       type="dir">
	      <filepath>
		<fileset dir="${extract.destination}">
		  <include name="*/*"/>
		</fileset>
	      </filepath>
	    </available>

			<!-- expanded feature-->
			<path id="features.feature.dirs">
				<dirset dir="${extract.destination}">
					<include name="features/*" />
				</dirset>
			</path>
			<var unset="true" name="has.features.feature.xml" />
			<available property="has.features.feature.xml"
			           file="feature.xml"
			           type="file">
				<filepath refid="features.feature.dirs" />
			</available>

			<!-- jarred feature from an update site-->
			<fileset dir="${extract.destination}/features/"
			         id="features.feature.jars">
				<include name="*.jar" />
			</fileset>
			<available-fileset refid="features.feature.jars"
			                   var="has.features.feature.jars" />

			<!-- jarred plugin from an update site-->
			<fileset dir="${extract.destination}/plugins/"
			         id="plugins.plugin.jars">
				<include name="*.jar" />
			</fileset>
			<available-fileset refid="plugins.plugin.jars"
			                   var="has.plugins.plugin.jars" />

			<!-- eclipse dir at the root-->
			<var unset="true" name="has.eclipse.dir" />
			<available property="has.eclipse.dir"
			           file="eclipse"
			           filepath="${extract.destination}"
			           type="dir" />

			<!-- eclipse/features dir at the root-->
			<var unset="true" name="has.eclipse.features.dir" />
			<available property="has.eclipse.features.dir"
			           file="eclipse/features"
			           filepath="${extract.destination}"
			           type="dir" />

			<!-- eclipse/plugins dir at the root-->
			<var unset="true" name="has.eclipse.plugins.dir" />
			<available property="has.eclipse.plugins.dir"
			           file="eclipse/plugins"
			           filepath="${extract.destination}"
			           type="dir" />

			<!-- jarred plugin osgi style-->
			<fileset dir="${extract.destination}/eclipse/plugins/"
			         id="eclipse.plugins.plugin.jars">
				<include name="*.jar" />
			</fileset>
			<available-fileset refid="eclipse.plugins.plugin.jars"
			                   var="has.eclipse.plugins.plugin.jars" />


			<!--
			===========================================
			determine the style of packaging of a download
			===========================================
			-->

			<!-- Zipped Update Site STYLE zipped update site
			CAN BE AUTOMATICALLY PROCESSED AS AN UPDATE SITE
			BUT WOULD NEED TO INFER THE NAME OF THE FEATURES...

			The key to this style is the presence of style.xml
			and jarred features and plugins, unexpanded
			(ie no feature.xml, no plugin.xml available)
			The source download extension is always zip, or tar.gz mostly for now.
			Extracted arhive structure:
			site.xml
			/features/featureid _version.jar some features driving the unjarring
			/plugins/pluginid_version.jar  some jarred plugins tu unjar based on feature attribute
			-->
			<condition property="@{property}" value="Zipped Update Site">
				<and>
					<isset property="file.isZipOrTarGz" />
					<isset property="has.site.xml" />
					<isset property="has.plugins.dir" />
					<isset property="has.features.dir" />
					<isset property="has.features.feature.jars" />
					<isset property="has.plugins.plugin.jars" />
				</and>
			</condition>

			<!-- Zipped Plugins STYLE zipped single or multiple plugins, no feature, no dir structure.
			Can contain some jarred plugins mixed in
			The key to this style is the absence of /plugins at the root of the archive.
			The source download extension is always zip, or tar.gz mostly for now.
			Extracted archive structure:
			*/plugin.xml
			or
			*/META-INF/manifest.mf
			-->
			<condition property="@{property}" value="Zipped Plugins">
				<and>
					<isset property="file.isZipOrTarGz" />
					<not>
						<isset property="file.isJar" />
					</not>
					<not>
						<isset property="has.site.xml" />
					</not>
					<not>
						<isset property="has.eclipse.dir" />
					</not>
					<not>
						<isset property="has.plugins.dir" />
					</not>
					<not>
						<isset property="has.features.dir" />
					</not>
					<or>
						<!-- FIXME: we should also introsepct the manifest.mf
						if there is only that to avoid confusion with regular JARs-->
						<isset property="has.componentid.plugin.xml" />
						<isset property="has.componentid.manifest.mf" />
					</or>
				</and>
			</condition>


			<!-- Single Jarred Plugin STYLE no feature, no dir structure only one jar
			The key to this style is the fatc that it is a Jar and the presence of
			manifest.mf and the absence of plugin.xml
			Extracted arhive structure:
			/META-INF/manifest.mf
			-->
			<condition property="@{property}" value="Single Jarred Plugin">
				<and>
					<isset property="file.isJar" />
					<not>
						<isset property="has.site.xml" />
					</not>
					<not>
						<isset property="has.eclipse.dir" />
					</not>
					<not>
						<isset property="has.plugins.dir" />
					</not>
					<not>
						<isset property="has.features.dir" />
					</not>
					<!-- FIXME: we should also introsepct the manifest.mf
						if there is only that to avoid confusion with regular
						JARs not packaged as OSGi or Eclipse bundle -->
					<isset property="has.manifest.mf" />
					<not>
						<isset property="has.plugin.xml" />
					</not>
				</and>
			</condition>

			<!-- Zipped Plugin within Dir  STYLE no feature, one dire level, not eclipse, plugins or features
			The key to this style is the fatc that the directory content is eclipse stuffs
			Extracted archive structure:
			/some dir/asas.asas._2.3.5.jar
			/some dir/asas.as1213as_1.2.5/...plus stuffss
			-->
			<condition property="@{property}" value="Zipped Plugin Within Dir">
				<and>
					<isset property="file.isZipOrTarGz" />
					<not>
						<isset property="has.site.xml" />
					</not>
					<not>
						<isset property="has.eclipse.dir" />
					</not>
					<not>
						<isset property="has.plugins.dir" />
					</not>
					<not>
						<isset property="has.features.dir" />
					</not>
					<not>
						<isset property="has.somedir.features.dir" />
					</not>
					<not>
						<isset property="has.somedir.plugins.dir" />
					</not>
					<isset property="has.dirs.jars.or.plugins" />
				</and>
			</condition>


			<!-- Zipped Eclipse install STYLE
			Extracted archive structure:
			/some dir/plugins/asas.asas._2.3.5.jar
			/some dir/plugins/asas.as1213as_1.2.5/...plus stuffss
			/some dir/features/asas.asas._2.3.5.jar
			/some dir/features/asas.as1213as_1.2.5/...plus stuffss
			-->
			<condition property="@{property}" value="Zipped Eclipse install">
				<and>
					<isset property="file.isZipOrTarGz" />
					<not>
						<isset property="has.site.xml" />
					</not>
					<not>
						<isset property="has.eclipse.dir" />
					</not>
					<not>
						<isset property="has.plugins.dir" />
					</not>
					<not>
						<isset property="has.features.dir" />
					</not>
					<isset property="has.somedir.features.dir" />
					<isset property="has.somedir.plugins.dir" />
					<isset property="has.dirs.jars.or.plugins" />
				</and>
			</condition>


			<!-- Zipped Features And Plugins STYLE zipped feature+plugin
			This style is very similar to the zipped updated site, except it is deployed, and has no site.xml
			The key to this style is the presence of /plugins AND /featuress at the root of the archive
			AND the absence /site.xml
			The source download extension is always zip, or tar.gz mostly for now.

			Extracted arhive structure:
			/features/featureid _version/feature.xml
			/plugins/pluginid_version/plugin.xml
			or
			/plugins/pluginid_version/plugin.xml
			It is possible to have all jarred plugin, so we must always have a feature.xml

			Note that all the present features MUST describe all the present plugins for the stuff to be correct
			-->
			<condition property="@{property}"
			           value="Zipped Features And Plugins">
				<and>
					<isset property="file.isZipOrTarGz" />
					<not>
						<isset property="has.site.xml" />
					</not>
					<or>
						<and>
							<isset property="has.features.dir" />
							<isset property="has.features.feature.xml" />
						</and>
						<isset property="has.plugins.dir" />
					</or>
				</and>
			</condition>

			<!-- Zipped Eclipse with Features and Plugins STYLE zipped eclipse+feature+plugin
			This style is very similar to the zipped feature+plugin but it has an eclipse dir at the root
			The key to this style is the presence of /eclipse at the root and /plugins AND /featuress just below
			Several subfiles can be present under eclipse, including subdirs, ini files, and so on.
			This is the packaging style of the Eclipse SDK , and some other like WTP.
			The source download extension is always zip, or tar.gz mostly for now.

			Extracted arhive structure:
			/eclipse
			/eclipse/somefiles and other dir (optional, but I think they should typically be kept)
			/eclipse/features/featureid _version/feature.xml
			/eclipse/plugins/pluginid_version/plugin.xml
			or
			/eclipse/plugins/pluginid_version/plugin.xml

			Note that all the present features MUST describe all the present plugins for the stuff to be correct
			-->
			<condition property="@{property}"
			           value="Zipped Eclipse with Features and Plugins">
				<and>
					<isset property="file.isZipOrTarGz" />
					<isset property="has.eclipse.dir" />
					<or>
						<isset property="has.eclipse.features.dir" />
						<isset property="has.eclipse.plugins.dir" />
					</or>
				</and>
			</condition>


			<!-- Unknown STYLE: the style that is set when nothing else has been found -->
			<condition property="@{property}" value="Unknown">
				<not>
					<isset property="@{property}" />
				</not>
			</condition>

			<echo>**DOWNLOAD STYLE for @{component.id}-@{component.version} : ${@{property}}</echo>
            <echo-props properties="file.isJar,file.isZipOrTarGz,has.componentid.manifest.mf,has.componentid.plugin.xml"/>
            <echo-props properties="has.dirs.jars.or.plugins,has.eclipse.dir,has.eclipse.features.dir,has.eclipse.plugins.dir"/>
            <echo-props properties="has.features.dir,has.features.feature.jars,has.features.feature.xml,has.manifest.mf"/>
            <echo-props properties="has.plugin.xml,has.plugins.dir,has.plugins.plugin.jars,has.site.xml"/>
            <echo-props properties="has.somedir.plugins.dir,has.somedir.features.dir,has.dirs.jars.or.plugins,has.root.somedirs.plugins"/>
		</sequential>
	</macrodef>

	<macrodef name="available-fileset"
	          description="Sets a var to the string path value of a given reference to a path, fileset, dirset, or filelist or nothing if this structure is empty ">
		<attribute name="refid" />
		<attribute name="var" />
		<sequential>
			<!--a hack, that can fail to see if a fileset has some files, so try /catch -->
			<trycatch>
				<try>
					<var unset="true" name="@{var}" />
					<pathconvert setonempty="false"
					             refid="@{refid}"
					             property="@{var}" />
				</try>
				<catch />
			</trycatch>
		</sequential>
	</macrodef>


	<macrodef name="is-typical-eclipse-name"
	          description="Sets the property if the name matches a typical eclipse filename pattern">
		<attribute name="file" />
		<attribute name="var" />
		<sequential>
			<var unset="true" name="@{var}" />

			<!--recognized pattern are :
			- some path or url at the begining, can be empty
			- must be a file name at the end, with or withou extension: extension recognized is jar only for now.
			- must be in the form of
((.)*(\\|\/))*([a-zA-Z0-9\-\.]{3,}_([0-9]+\.){2}([0-9]+)(\.([a-zA-Z0-9\-_\.])+)?(\.jar)?)

sdfsdfsd/dfsdfsd\sdfsdfsd/dsfsdfs
fil:/dsfdsf\sd/dsfsorg.eclipse.baba_1.1.2.jar
sdfsdfsd/dfsdfsd\sdfsdfsd/dsfsdfsorg.eclipse.baba_1.2.34
c:\sdfsfsdf\sdfsdf/org.eclipse.baba_1.2.34.jar
sdfsdfsd/dfsdfsd\sdfsdfsd/dsfsdfsorg.eclipse.baba_1.2.34.asda234234jkl_-
c:\sdfsfsdf\sdfsdf/org.eclipse.baba_1.2.34. asda234234jkl_-.jar
			org.eclipse.baba_
			org.eclipse.baba_1.2.34
			org.eclipse.baba_1.2.34.jar
			org.eclipse.baba_
			org.eclipse.baba_1.2.34
			org.eclipse.baba_1.2.34.jar
			org.eclipse.baba_1.2.34.jar
			-->

			<!-- a regex for plugin or feature jar-->
			<if>
				<available type="file" file="@{file}" />
				<then>
					<propertyregex property="@{var}"
					               input="@{file}"
					               regexp="(.*(\\|\/))*([a-zA-Z0-9\-\.]{3,}_([0-9]+\.){2}([0-9]+)(\.([a-zA-Z0-9\-_\.])+)?\.jar)$"
					               select="\3"
					               casesensitive="false"
					               override="true" />
				</then>
			</if>
			<!-- a regex for plugin or feature dir -->
			<if>
				<available type="dir" file="@{file}" />
				<then>
					<propertyregex property="@{var}"
					               input="@{file}"
					               regexp="(.*(\\|\/))*([a-zA-Z0-9\-\.]{3,}_([0-9]+\.){2}([0-9]+)(\.([a-zA-Z0-9\-_\.])+)?)$"
					               select="\3"
					               casesensitive="false"
					               override="true" />
				</then>
			</if>
		</sequential>
	</macrodef>


    <macrodef name="does-dir-contains-eclipse-stuff"
              description="Sets the property to true all the files are plugins or features jara and all the directories are plugins or feature directories based on their names">
		<attribute name="dir" />
		<attribute name="var" />
		<sequential>
			<var unset="true" name="@{var}" />
			<var name="@{var}" value="true" />
            <path id="eclipse-stuff.path.@{var}">
                <fileset dir="@{dir}" includes="*.jar" />
                <dirset dir="@{dir}" includes="*" />
            </path>
            <var unset="true" name="@{var}.path" />
            <pathconvert setonempty="false"
                         refid="eclipse-stuff.path.@{var}"
                         property="@{var}.path" />
            <echo level="debug">Path: ${@{var}.path}</echo>
			<for param="f">
				<path refid="eclipse-stuff.path.@{var}"/>
				<sequential>
					<is-typical-eclipse-name file="@{f}"
					                         var="does-dir-contains-eclipse-stuff" />
					<if>
						<not>
							<isset property="does-dir-contains-eclipse-stuff" />
						</not>
						<then>
							<var name="@{var}" value="false" />
						</then>
					</if>
				</sequential>
			</for>
		</sequential>
	</macrodef>



	<!-- =================================
          target: name
         ================================= -->
	<target name="test-name-contain-eclipse-stuff" >
		<is-typical-eclipse-name file="c:\sdfsfsdf\sdfsdf/org.eclipse.baba_1.2.34.asda234234jkl_-.jar"
		                         var="abab" />
		<is-typical-eclipse-name file="C:\ec-312\eclipse\plugins\org.apache.ant_1.6.5"
		                         var="dir" />
		<is-typical-eclipse-name file="C:\ec-312\eclipse\plugins\org.apache.ant_1.6.5\META-INF"
		                         var="dir2" />
		<is-typical-eclipse-name file="C:\ec-312\eclipse\plugins\org.eclipse.update.core_3.1.2.jar"
		                         var="jar" />
		<does-dir-contains-eclipse-stuff dir="C:\ec-312\eclipse\plugins"
		                                 var="plugin" />
		<does-dir-contains-eclipse-stuff dir="C:\ec-312\eclipse\features"
		                                 var="features" />
		<does-dir-contains-eclipse-stuff dir="C:\ec-312\eclipse\"
		                                 var="eclipse" />
	</target>
</project>
