/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
 * or http://www.opensolaris.org/os/licensing.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at usr/src/OPENSOLARIS.LICENSE.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */
/*
 * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
 * Use is subject to license terms.
 */
package org.opensolaris.webstack.settings.options;

import java.awt.Desktop;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.opensolaris.webstack.settings.execution.ServerStatus;
import org.opensolaris.webstack.settings.execution.ServersManager;
import org.opensolaris.webstack.settings.model.Environment;
import org.opensolaris.webstack.settings.model.HttpdConfModel;
import org.opensolaris.webstack.settings.model.Model;
import org.opensolaris.webstack.settings.model.PHPIniModel;
import org.opensolaris.webstack.settings.model.XdebugIniModel;

/**
 *
 * @author  ludo
 */
public class PHPPanel extends javax.swing.JPanel implements PropertyChangeListener {

    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/opensolaris/webstack/settings/options/Bundle"); // NOI18N
    PHPIniModel p;
    XdebugIniModel xdebugmodel;
    HttpdConfModel model;

    /** Creates new form PHPPanel */
    public PHPPanel(HttpdConfModel model, PHPIniModel phpmodel, XdebugIniModel xdebugmodel) {
        p = phpmodel;
        this.model = model;
        this.xdebugmodel = xdebugmodel;
        p.addPropertyChangeListener(this);
        initComponents();
        initFromModel();




    }

    void initFromModel() {
        jCheckBoxdebug.setSelected(xdebugmodel.isDebugMode());
        String error = p.getErrorReporting();

        jCheckBoxallErrors.setSelected((error.indexOf("E_ALL") > -1));
        jCheckBoxRunTimeNotices.setSelected((error.indexOf("E_STRICT") > -1));
        jCheckBoxRunTimeWarnings.setSelected((error.indexOf("E_WARNING") > -1));
        jCheckBoxfatalRunTimeErrors.setSelected((error.indexOf("E_ERROR") > -1));
    }

    void UpdateModel() {

        xdebugmodel.setDebugMode(jCheckBoxdebug.isSelected());
        String error = "";
        if (jCheckBoxallErrors.isSelected()) {
            if (error.length() > 0) {
                error += " & ";
            }
            error = error + "E_ALL";
        }
        if (jCheckBoxRunTimeNotices.isSelected()) {
            if (error.length() > 0) {
                error += " & ";
            }
            error = error + "E_STRICT";
        }
        if (jCheckBoxRunTimeWarnings.isSelected()) {
            if (error.length() > 0) {
                error += " & ";
            }
            error = error + "E_WARNING";
        }
        if (jCheckBoxfatalRunTimeErrors.isSelected()) {
            if (error.length() > 0) {
                error += " & ";
            }
            error = error + "E_ERROR";
        }
        p.setErrorReporting(error);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        buttonAdvanceConf = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jCheckBoxallErrors = new javax.swing.JCheckBox();
        jCheckBoxfatalRunTimeErrors = new javax.swing.JCheckBox();
        jCheckBoxRunTimeWarnings = new javax.swing.JCheckBox();
        jCheckBoxRunTimeNotices = new javax.swing.JCheckBox();
        jCheckBoxdebug = new javax.swing.JCheckBox();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/opensolaris/webstack/settings/options/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("LABEL_Debug")); // NOI18N
        jLabel1.setToolTipText(bundle.getString("LABEL_PHPVERSION")); // NOI18N

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText(bundle.getString("LABEL_ERRORREPORTINGLEVEL")); // NOI18N

        buttonAdvanceConf.setText(bundle.getString("LABEL_ADVANCE_CONF")); // NOI18N
        buttonAdvanceConf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAdvanceConfActionPerformed(evt);
            }
        });

        jLabel3.setText(bundle.getString("LABEL_EDITPHPINI")); // NOI18N
        jLabel3.setEnabled(false);

        jButton1.setText(bundle.getString("LABEL_SHOWPHPINFO")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBoxallErrors.setText(bundle.getString("E_ALL")); // NOI18N

        jCheckBoxfatalRunTimeErrors.setText(bundle.getString("E_ERROR")); // NOI18N

        jCheckBoxRunTimeWarnings.setText(bundle.getString("E_WARNING")); // NOI18N

        jCheckBoxRunTimeNotices.setText(bundle.getString("E_NOTICE")); // NOI18N

        jCheckBoxdebug.setText("enable");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonAdvanceConf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                    .addComponent(jCheckBoxallErrors)
                    .addComponent(jCheckBoxdebug)
                    .addComponent(jCheckBoxfatalRunTimeErrors)
                    .addComponent(jCheckBoxRunTimeWarnings)
                    .addComponent(jCheckBoxRunTimeNotices))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxdebug)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxallErrors)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxfatalRunTimeErrors)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRunTimeWarnings)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRunTimeNotices)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAdvanceConf)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void buttonAdvanceConfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAdvanceConfActionPerformed
        Desktop desktop = null;
        // Before more Desktop API is used, first check
        // whether the API is supported by this particular
        // virtual machine (VM) on this particular host.
        if (Desktop.isDesktopSupported()) {
            desktop = Desktop.getDesktop();
        }
        if (desktop.isSupported(Desktop.Action.OPEN)) {
            try {

                desktop.open(new File(Environment.getPhpini()));
            } catch (IOException ex) {
                Logger.getLogger(PHPPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_buttonAdvanceConfActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed


        //1 check for the server running. If not, warn the user and stop
        ServerStatus s = ServersManager.getRunningState();
        if (!s.apacheRunning) {
            JOptionPane.showMessageDialog(null, "Please, start the servers before viewing a phpinfo() page.");
            return;
        }
        //2 create a temporary file under htdocs that contains phpinfo
        File f = null;
        String htdoc = model.getDocumentRoot();
        try {
            f = File.createTempFile("phpinfo", ".php", new File(htdoc));
            FileWriter fout = null;

            try {
                fout = new FileWriter(f, false);
                fout.write("<p>temporary generated page: do not reload...</p>");
                fout.write("<?php phpinfo(); ?>");

            } catch (Exception e) {
                Logger.getLogger(Model.class.getName()).log(Level.SEVERE, null, e);
            } finally {
                try {
                    fout.close();
                } catch (IOException ex) {
                    Logger.getLogger(Model.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            //3 display it
            try {
                // launch browser
                URI uri = new URI("http://localhost:" + Environment.getApachePortNumber() + "/" + f.getName());
                Desktop.getDesktop().browse(uri);
            } catch (Exception ex) {
                Logger.getLogger(PHPPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (Exception ex) {
            Logger.getLogger(PHPPanel.class.getName()).log(Level.SEVERE, null, ex);
        }


        //4 delete it after a few seconds for security reason. Page reload will not work but we are secure.
        if (f == null) {
            return;
        }
        if (f.exists()) {
            Timer timer = new Timer(true); //deamon
            final File ff = f;
            timer.schedule(new TimerTask() {

                @Override
                public void run() {
                    ff.delete();
                }
            }, 15000);

        }
  
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdvanceConf;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBoxRunTimeNotices;
    private javax.swing.JCheckBox jCheckBoxRunTimeWarnings;
    private javax.swing.JCheckBox jCheckBoxallErrors;
    private javax.swing.JCheckBox jCheckBoxdebug;
    private javax.swing.JCheckBox jCheckBoxfatalRunTimeErrors;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        initFromModel();

    }
}
